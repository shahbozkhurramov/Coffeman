@page "/"
@using Coffeman.Models
@using System.Text.Json
@inject MenuService menuService
@inject IJSRuntime JSRuntime

<div class="info-card rounded mb-3 p-3 d-flex justify-content-between align-items-center">
    <div>
        <h5 class="text-white">Your Daily Dose of</h5>
        <h2 class="font-weight-bold">Caffeine</h2>
    </div>
    <img src="Images/coffee.png" alt="Coffee" class="img-fluid">
</div>




<!-- Search Input -->
<div class="input-group my-3">
    <input type="text"  @bind="searchText" @bind:event="oninput" class="form-control" placeholder="Search..." @onkeydown="HandleKeyPress">
    <button class="btn search-btn" type="button" @onclick="FilterCategories">
        <img src="Images/Icons/search.svg" />
    </button>
</div>

<!-- Scrollable & Sticky Categories -->
<div class="position-sticky top-0 border-3 py-1 mb-3">
    <div class="d-flex overflow-auto categories-scroll">
        @foreach (var category in Categories)
        {
            <button class="btn btn-outline-success me-2 rounded-pill" @onclick="() => ScrollToCategory(category.Id)">
                <img src="@category.ImageUrl" /> @category.Name
            </button>
        }
    </div>
</div>

<!-- Items -->
@foreach (var category in FilteredCategories)
{
    <div id="@category.Id" class="px-2">
        <h5>@category.Name</h5>
        <div class="row">
            @foreach (var item in category.MenuItems)
            {
                <div class="col-4 mb-3">
                    <div class="card shadow-sm">
                        <img src="@item.ImageUrl" class="card-img-top">
                        <div class="card-body">
                            <div class="card-title fw-semibold text-center">@item.Name</div>
                            <div class="card-price text-secondary text-center">@item.Price</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private string searchText = string.Empty;
    private Category[] Categories = Array.Empty<Category>();
    private Category[] FilteredCategories = Array.Empty<Category>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await menuService.GetCategoriesAsync();
        FilteredCategories = Categories;
    }

    private async Task ScrollToCategory(string categoryId)
    {
        await JSRuntime.InvokeVoidAsync("scrollIntoViewById", categoryId);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterCategories();
        }
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredCategories = Categories;
            return;
        }

        FilteredCategories = Categories.Select(category => new Category
            {
                Id = category.Id,
                Name = category.Name,
                ImageUrl = category.ImageUrl,
                MenuItems = category.MenuItems.Where(item => item.Name.Contains(searchText,
                StringComparison.OrdinalIgnoreCase)).ToList()
            })
        .Where(category => category.MenuItems.Any())
        .ToArray();
    }
}
